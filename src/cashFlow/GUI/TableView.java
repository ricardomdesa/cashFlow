/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cashFlow.GUI;

import Tables.AccountTable;
import Tables.CashFlowInfo;
import Tables.CategoryTable;
import Tables.ExpenseTable;
import Tables.IncomeTable;
import cashFlow.Listeners.ValuesChangeAction;
import cashFlow.Listeners.ValuesChangeEvent;
import db.Control.ModelControl;
import db.tableInterfaces.TableModel;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.event.MouseInputAdapter;
import utils.ObjectCellTableGetValueCellTableView;
import utils.TableUtils;

/**
 *
 * @author F98877A
 */
public class TableView extends javax.swing.JPanel implements ValuesChangeAction {

    protected Map<Object, Class> tableHeader;
    protected javax.swing.event.MouseInputAdapter mouseListener;
    protected JMenuItem menuItem;
    protected int r;
    protected ExpenseTable expenseSelected;
    protected IncomeTable incomeSelected;
    protected IncomeTable incLoad = null;
    protected ExpenseTable expLoad = null;
    protected AccountTable accExp = null;
    private ValuesChangeEvent vc;

    /**
     * Creates new form TableView
     */
    public TableView() {
        initComponents();
    }

    public MouseInputAdapter getMouseListener() {
        return mouseListener;
    }

    public void setMouseListener(MouseInputAdapter mouseListener) {
        this.mouseListener = mouseListener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stsPanel = new javax.swing.JPanel();
        stsScroll = new javax.swing.JScrollPane();
        stsTable = new javax.swing.JTable();

        stsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        stsScroll.setViewportView(stsTable);

        javax.swing.GroupLayout stsPanelLayout = new javax.swing.GroupLayout(stsPanel);
        stsPanel.setLayout(stsPanelLayout);
        stsPanelLayout.setHorizontalGroup(
            stsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        stsPanelLayout.setVerticalGroup(
            stsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel stsPanel;
    private javax.swing.JScrollPane stsScroll;
    private javax.swing.JTable stsTable;
    // End of variables declaration//GEN-END:variables

    public void fillExpensesTable(Month month, int acc) throws Exception {

        List expenses = null;
        List ord = new ArrayList();
        ExpenseTable expenseTable = null;
        CategoryTable categ = null;
        AccountTable accountTable = null;

        tableHeader = new HashMap();

        for (String ExpColumn : CashFlowInfo.ExpColumns) {
            tableHeader.put(ExpColumn, ObjectCellTableGetValueCellTableView.class);
            ord.add(ExpColumn);
        }

        try {
            stsTable = TableUtils.create(tableHeader, ord, new ArrayList());
        } catch (Exception ex) {
            Logger.getLogger(TableView.class.getName()).log(Level.SEVERE, null, ex);
        }
        stsScroll.setViewportView(stsTable);

        expenses = ModelControl.selectWithParam(ExpenseTable.class, month.ordinal() + 1, acc);       // month.ordinal() returns from 0 to 11, so add 1

        for (int it = 0; it < expenses.size(); it++) {

            if (expenses.get(it) instanceof ExpenseTable) {
                expenseTable = (ExpenseTable) expenses.get(it);

                TableModel categoryLoad = ModelControl.load(CategoryTable.class, expenseTable.getCategory());

                if (categoryLoad instanceof CategoryTable) {
                    categ = (CategoryTable) categoryLoad;
                }

                TableModel accountLoad = ModelControl.load(AccountTable.class, expenseTable.getAccOid());

                if (accountLoad instanceof AccountTable) {
                    accountTable = (AccountTable) accountLoad;
                }

                TableUtils.addRow(stsTable);
                CellValueObj cellValueObj = new CellValueObj();
                cellValueObj.setObjId(expenseTable.getOid());
                LocalDate date = LocalDate.of(expenseTable.getYear(), month, expenseTable.getDay());
                cellValueObj.setValue(date.toString());
                cellValueObj.setControl(CashFlowInfo.EXPENSE_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[0]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(expenseTable.getOid());
                cellValueObj.setValue(expenseTable.getDescription());
                cellValueObj.setControl(CashFlowInfo.EXPENSE_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[1]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(expenseTable.getOid());
                cellValueObj.setValue(String.valueOf(expenseTable.getValue()));
                cellValueObj.setControl(CashFlowInfo.EXPENSE_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[2]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(expenseTable.getOid());
                cellValueObj.setValue(categ.getCategory());
                cellValueObj.setControl(CashFlowInfo.EXPENSE_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[3]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(expenseTable.getOid());
                cellValueObj.setValue(accountTable.getName());
                cellValueObj.setControl(CashFlowInfo.EXPENSE_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[4]);

                stsTable.getColumnModel().getColumn(1).setPreferredWidth(200);
                stsTable.getColumnModel().getColumn(4).setPreferredWidth(100);
                stsTable.setEnabled(false);
            }
        }

        stsTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        stsTable.addMouseListener(mouseListener);
        stsTable.getTableHeader().setReorderingAllowed(false);

    }

    public void fillIncomeTable(Month month, int acc) throws Exception {

        List incomes = null;
        List ord = new ArrayList();
        IncomeTable incomeTable = null;
        CategoryTable categ = null;
        AccountTable accountTable = null;

        tableHeader = new HashMap();

        for (String ExpColumn : CashFlowInfo.ExpColumns) {
            tableHeader.put(ExpColumn, ObjectCellTableGetValueCellTableView.class);
            ord.add(ExpColumn);
        }

        try {
            stsTable = TableUtils.create(tableHeader, ord, new ArrayList());
        } catch (Exception ex) {
            Logger.getLogger(TableView.class.getName()).log(Level.SEVERE, null, ex);
        }
        stsScroll.setViewportView(stsTable);

        incomes = ModelControl.selectWithParam(IncomeTable.class, month.ordinal() + 1, acc);       // month.ordinal() returns from 0 to 11, so add 1

        for (int it = 0; it < incomes.size(); it++) {

            if (incomes.get(it) instanceof IncomeTable) {
                incomeTable = (IncomeTable) incomes.get(it);

                TableModel categoryLoad = ModelControl.load(CategoryTable.class, incomeTable.getCategory());

                if (categoryLoad instanceof CategoryTable) {
                    categ = (CategoryTable) categoryLoad;
                }

                TableModel accountLoad = ModelControl.load(AccountTable.class, incomeTable.getAccOid());

                if (accountLoad instanceof AccountTable) {
                    accountTable = (AccountTable) accountLoad;
                }

                TableUtils.addRow(stsTable);

                CellValueObj cellValueObj = new CellValueObj();
                cellValueObj.setObjId(incomeTable.getOid());
                LocalDate dateInc = LocalDate.of(incomeTable.getYear(), month, incomeTable.getDay());
                cellValueObj.setValue(dateInc.toString());
                cellValueObj.setControl(CashFlowInfo.INCOME_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[0]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(incomeTable.getOid());
                cellValueObj.setValue(incomeTable.getDescription());
                cellValueObj.setControl(CashFlowInfo.INCOME_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[1]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(incomeTable.getOid());
                cellValueObj.setValue(String.valueOf(incomeTable.getValue()));
                cellValueObj.setControl(CashFlowInfo.INCOME_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[2]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(incomeTable.getOid());
                cellValueObj.setValue(categ.getCategory());
                cellValueObj.setControl(CashFlowInfo.INCOME_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[3]);
                cellValueObj = new CellValueObj();
                cellValueObj.setObjId(incomeTable.getOid());
                cellValueObj.setValue(accountTable.getName());
                cellValueObj.setControl(CashFlowInfo.INCOME_CTRL);
                TableUtils.setCellValue(cellValueObj, stsTable, it, CashFlowInfo.ExpColumns[4]);

                stsTable.getColumnModel().getColumn(1).setPreferredWidth(200);
                stsTable.getColumnModel().getColumn(4).setPreferredWidth(100);
                stsTable.setEnabled(false);
            }
        }

        stsTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        stsTable.addMouseListener(mouseListener);
        stsTable.getTableHeader().setReorderingAllowed(false);

    }

    void mouseOnClick(MouseEvent e) {

        int col = stsTable.getTableHeader().columnAtPoint(e.getPoint());
        //  Event from Right-Click only
        if (e.getButton() == MouseEvent.BUTTON3) {
            if (stsTable.getTableHeader().getCursor().getType() == Cursor.E_RESIZE_CURSOR) {
                e.consume();
            } else {
                stsTable.setColumnSelectionAllowed(true);
                stsTable.setColumnSelectionInterval(col, col);
            }
            r = stsTable.rowAtPoint(e.getPoint());
            int c = stsTable.columnAtPoint(e.getPoint());

            if (r >= 0 && r < stsTable.getRowCount()) {
                stsTable.setRowSelectionInterval(r, r);
                stsTable.setSelectionBackground(Color.CYAN);
                stsTable.setColumnSelectionInterval(c, c);
            } else {
                stsTable.clearSelection();
            }
            if (stsTable.getValueAt(r, c) instanceof ObjectCellTableGetValueCellTableView) {

                ObjectCellTableGetValueCellTableView cellTableView = (ObjectCellTableGetValueCellTableView) stsTable.getValueAt(r, c);
                CellValueObj cell = (CellValueObj) cellTableView.getCellValue();
                if (cell.getControl() == CashFlowInfo.EXPENSE_CTRL) {
                    //get the selected ExpenseTable
                    try {
                        expLoad = (ExpenseTable) ModelControl.load(ExpenseTable.class, cell.getObjId());
                    } catch (SQLException ex) {
                        Logger.getLogger(TableView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    expenseSelected = expLoad;
                    //get the selected AccountTable
                    try {
                        accExp = (AccountTable) ModelControl.load(AccountTable.class, expenseSelected.getAccOid());
                    } catch (SQLException ex) {
                        Logger.getLogger(TableView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                        JPopupMenu popup = new JPopupMenu();

                        ActionListener l = (ActionEvent e1) -> {

                            AddExpenseScreen exp = new AddExpenseScreen(expenseSelected.getOid());
                            exp.setPanelToChange(vc);
                            exp.setAccount(accExp);
                            exp.setVisible(true);

                        };

                        popup.removeAll();
                        menuItem = new JMenuItem("Edit");
                        popup.add(menuItem);
                        menuItem.addActionListener(l);
                        popup.show(e.getComponent(), e.getX(), e.getY());
                    }
                } else {
                    //get the selected IncomeTable
                    try {
                        incLoad = (IncomeTable) ModelControl.load(IncomeTable.class, cell.getObjId());
                    } catch (SQLException ex) {
                        Logger.getLogger(TableView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    incomeSelected = incLoad;
                    //get the selected AccountTable
                    try {
                        accExp = (AccountTable) ModelControl.load(AccountTable.class, incomeSelected.getAccOid());
                    } catch (SQLException ex) {
                        Logger.getLogger(TableView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                        JPopupMenu popup = new JPopupMenu();

                        ActionListener l = (ActionEvent e1) -> {

                            AddIncomeScreen inc = new AddIncomeScreen(incomeSelected.getOid());
                            inc.setPanelToChange(vc);
                            inc.setAccount(accExp);
                            inc.setVisible(true);

                        };

                        popup.removeAll();
                        menuItem = new JMenuItem("Edit");
                        popup.add(menuItem);
                        menuItem.addActionListener(l);
                        popup.show(e.getComponent(), e.getX(), e.getY());
                    }

                }

            }

        }

    }

    @Override
    public void setPanelToChange(ValuesChangeEvent panel) {
        this.vc = panel;
    }

}
