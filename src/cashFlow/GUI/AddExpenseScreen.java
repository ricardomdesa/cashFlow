/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cashFlow.GUI;

import Tables.AccountTable;
import Tables.CashFlowInfo;
import Tables.CategoryTable;
import Tables.ExpenseTable;
import cashFlow.GUI.Renderers.ModifiedListRenderer;
import cashFlow.Listeners.ValuesChangeAction;
import cashFlow.Listeners.ValuesChangeEvent;
import db.Control.ModelControl;
import db.tableInterfaces.TableModel;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author f98877a
 */
public class AddExpenseScreen extends javax.swing.JFrame implements ValuesChangeAction {

    private int currentOid;
    private List<TableModel> cat = new ArrayList();
    private AccountTable account;
    private ValuesChangeEvent vc;
    private boolean edit;
    List<String> dateFormatStrings = Arrays.asList("dd/MM/yyyy", "d/M/yyyy", "dd/M/yyyy", "d/MM/yyyy");
    private ExpenseTable originalValue;

    /**
     * Creates new form AddExpenseScreen
     */
    public AddExpenseScreen() {
        this.account = null;
        initComponents();
        setCategoryList();
        edit = false;
        configScreenItens();

    }

    public AddExpenseScreen(int oid) {
        initComponents();
        setCategoryList();
        edit = true;
        currentOid = oid;
        fillValuesForEdition();

    }

    public AccountTable getAccount() {
        return account;
    }

    public void setAccount(AccountTable account) {
        this.account = account;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        expDescriptionTfd = new javax.swing.JTextField();
        expCategoryCbx = new javax.swing.JComboBox();
        expPayedRBtn = new javax.swing.JRadioButton();
        expRepeatRBtn = new javax.swing.JRadioButton();
        expSaveBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        expDateTfd = new javax.swing.JFormattedTextField();
        expValueTfd = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Descrição");

        jLabel2.setText("Valor");

        jLabel3.setText("Categoria");

        expPayedRBtn.setText("Pago?");

        expRepeatRBtn.setText("Repetir?");

        expSaveBtn.setText("Salvar");
        expSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expSaveBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("R$");

        jLabel5.setText("Data");

        expDateTfd.setColumns(3);
        expDateTfd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        expDateTfd.setToolTipText("");

        expValueTfd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(96, 302, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(expPayedRBtn)
                            .addComponent(expRepeatRBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(expSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                    .addGap(50, 50, 50)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(expDescriptionTfd)
                                            .addComponent(expCategoryCbx, 0, 256, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(expValueTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(expDateTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(expDescriptionTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(expValueTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(expCategoryCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(expDateTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(expPayedRBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(expRepeatRBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(expSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void expSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expSaveBtnActionPerformed

        // TODO add your handling code here:
        getAndSaveValues(edit);
        if (edit) {
            vc.setValuesChanged(this, true);
        } else {
            vc.setValuesChanged(this, false);
        }
        this.dispose();
    }//GEN-LAST:event_expSaveBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox expCategoryCbx;
    private javax.swing.JFormattedTextField expDateTfd;
    private javax.swing.JTextField expDescriptionTfd;
    private javax.swing.JRadioButton expPayedRBtn;
    private javax.swing.JRadioButton expRepeatRBtn;
    private javax.swing.JButton expSaveBtn;
    private javax.swing.JFormattedTextField expValueTfd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables

    private void setCategoryList() {

        CategoryTable ret;
        try {
            cat = ModelControl.select(CategoryTable.class);
        } catch (SQLException ex) {
            Logger.getLogger(AddExpenseScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

        expCategoryCbx.removeAllItems();
        for (TableModel cat1 : cat) {
            CategoryTable categ = (CategoryTable) cat1;

            if (categ.getType().equals(CashFlowInfo.CATEGORY_TYPE_OUT)) {
                expCategoryCbx.addItem(categ);
            }
        }
        expCategoryCbx.setRenderer(new ModifiedListRenderer());
    }

    private void configScreenItens() {

        //payed check
        expPayedRBtn.setSelected(true);

        //Value in currency
        DecimalFormat dFormat = new DecimalFormat("#,###,###.00");
        NumberFormatter pAmount = new NumberFormatter(dFormat);
        pAmount.setAllowsInvalid(false);
        expValueTfd.setFormatterFactory(new DefaultFormatterFactory(pAmount));

        //Date
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormatter d = new DateFormatter(dateFormat);
        expDateTfd.setFormatterFactory(new DefaultFormatterFactory(d));
        expDateTfd.setValue(new java.util.Date());

        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

    }

    private void getAndSaveValues(boolean edit1) {

        ExpenseTable expenseTable = new ExpenseTable();
        expenseTable.setOid(currentOid);
        //Date values
        String date = expDateTfd.getText();

        LocalDate parse = tryParse(date);

        expenseTable.setDay(parse.getDayOfMonth());
        expenseTable.setMonth(parse.getMonthValue());
        expenseTable.setYear(parse.getYear());

        //Description
        if (!"".equals(expDescriptionTfd.getText())) {
            expenseTable.setDescription(expDescriptionTfd.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Preencha a descrição");
        }

        //Category
        expenseTable.setCategory(((CategoryTable) expCategoryCbx.getSelectedItem()).getOid());

        //Value
        String value = expValueTfd.getText();
        value = value.replace(".", "");
        value = value.replace(",", ".");
        Double newValue = new Double(value);
        expenseTable.setValue(newValue);

        expenseTable.setPayed(expPayedRBtn.isSelected());
        expenseTable.setRepeat(expRepeatRBtn.isSelected());

        if (edit1) {
            if (newValue > originalValue.getValue()) {
                account.setValue(account.getValue() + (newValue - originalValue.getValue())); //increase the value
            } else {
                account.setValue(account.getValue() + (originalValue.getValue() - newValue)); //decrease the value
            }
        } else {
            account.setValue(account.getValue() - newValue); //update the account obj
        }
        if (account.getValue() >= 0) {
            account.setStatus(CashFlowInfo.POSITIVE);
        } else {
            account.setStatus(CashFlowInfo.NEGATIVE);
        }

        expenseTable.setAccOid(account.getOid());

        if (!edit1) {
            try {
                ModelControl.save(expenseTable);
            } catch (SQLException ex) {
                Logger.getLogger(AddExpenseScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                ModelControl.update(expenseTable);
            } catch (SQLException ex) {
                Logger.getLogger(AddExpenseScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            ModelControl.update(account);
        } catch (SQLException ex) {
            Logger.getLogger(AddExpenseScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void setPanelToChange(ValuesChangeEvent panel) {
        this.vc = panel;
    }

    private void fillValuesForEdition() {
        TableModel load = null;
        try {
            load = ModelControl.load(ExpenseTable.class, currentOid);
        } catch (SQLException ex) {
            Logger.getLogger(AddExpenseScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (load instanceof ExpenseTable) {
            originalValue = (ExpenseTable) load;

            StringBuilder sb = new StringBuilder();
            sb.append(originalValue.getDay()).append("/").append(originalValue.getMonth()).append("/").append(originalValue.getYear());
            expDateTfd.setFormatterFactory(null);
            expDateTfd.setText(sb.toString());

            expDescriptionTfd.setText(originalValue.getDescription());
            expCategoryCbx.setSelectedItem(originalValue.getCategory());
            String value = String.valueOf(originalValue.getValue()).replace(".", ",");
            expValueTfd.setFormatterFactory(null);
            expValueTfd.setText(value);
            expPayedRBtn.setSelected(originalValue.isPayed());
            expRepeatRBtn.setSelected(originalValue.isRepeat());

        }
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    private LocalDate tryParse(String date) {
        for (String formatString : dateFormatStrings) {
            try {
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(formatString);
                return LocalDate.parse(date, dateFormatter);
            } catch (Exception e) {
            }
        }

        return null;
    }
}
